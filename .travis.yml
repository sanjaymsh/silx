
dist: bionic
sudo: required

language: python

git:
    depth: 1

matrix:
    include:
        - python: 3.8
          os: linux
          arch: amd64
          env:
              - BUILD_COMMAND=bdist_wheel
              - QT_BINDING=PyQt5
              - SILX_OPENCL=1
              - PIP_OPTIONS="-q --pre"

        - python: 3.8
          os: linux
          arch: ppc64le
          env:
              - BUILD_COMMAND=bdist_wheel
              - QT_BINDING=PyQt5
              - SILX_OPENCL=1
              - PIP_OPTIONS="-q --pre"
        - python: 3.6
          os: linux
          arch: amd64
          env:
              - BUILD_COMMAND=sdist
              - QT_BINDING=PySide2
              - PIP_INSTALL_EXTRA_ARGS="--global-option build --global-option --debug"
              - SILX_OPENCL=1
              - PIP_OPTIONS="-q"

        - python: 3.6
          os: linux
          arch: ppc64le
          env:
              - BUILD_COMMAND=sdist
              - QT_BINDING=PySide2
              - PIP_INSTALL_EXTRA_ARGS="--global-option build --global-option --debug"
              - SILX_OPENCL=1
              - PIP_OPTIONS="-q"
        - language: generic
          os: osx
          env:
              - BUILD_COMMAND=bdist_wheel
              - QT_BINDING=PyQt5
              - PIP_OPTIONS="-q --pre"

branches:
    only:
        - master
        - /\d*\.\d*/
        - ppc64le

cache:
    apt: true

addons:
    apt:
        packages:
            - libegl1-mesa  # Required by Qt xcb platform plugin
            - ocl-icd-opencl-dev  # OpenCL headers, lib and icd loader
            - libgl1-mesa-glx  # For OpenGL
            - xserver-xorg-video-dummy  # For OpenGL
            - libxkbcommon-x11-0 # needed for Qt plugins
            - libxkbcommon0
            - libxkbcommon-dev
            - libxcb-icccm4
            - libxcb-image0
            - libxcb-shm0
            - libxcb-keysyms1
            - libxcb-randr0
            - libxcb-render-util0
            - libxcb-render0
            - libxcb-shape0
            - libxcb-sync1
            - libxcb-xfixes0
            - libxcb-xinerama0
            - libxcb-xkb1
            - libxcb1

before_install:
    # On Linux: install OpenCL
    # On MacOS: install python3 if needed
    - source ./ci/before_install-${TRAVIS_OS_NAME}.sh

install:
    # Upgrade distribution modules
    - python -m pip install ${PIP_OPTIONS} --upgrade pip
    - pip install ${PIP_OPTIONS} --upgrade setuptools

    # Install build dependencies
    - pip install ${PIP_OPTIONS} --upgrade wheel
    - pip install ${PIP_OPTIONS} --upgrade numpy
    - pip install ${PIP_OPTIONS} --upgrade cython

    # Print Python info
    - python ./ci/info_platform.py
    - pip list
    - if [ "$TRAVIS_OS_NAME" == "linux" ];
      then
          dpkg -l;
      fi

    # Generate source package or wheel
    - python setup.py $BUILD_COMMAND
    - ls dist

before_script:
    # Start X server with dummy video dirver
    # Use this instead of Xvfb to have RANDR extension
    # Otherwise there is a bug with Qt5.10.0
    - if [ "$TRAVIS_OS_NAME" == "linux" ];
      then
          export DISPLAY=:99.0;
          Xorg -noreset +extension GLX +extension RANDR +extension RENDER -logfile ./99.log -config ./ci/travis-xorg.conf :99 &
          sleep 3;
      fi

    # First install any temporary pinned/additional requirements
    - if [ -s "ci/requirements-pinned.txt" ];
      then
      pip install ${PIP_OPTIONS} -r ci/requirements-pinned.txt;
      fi

    # This installs PyQt and scipy if wheels are available
    - pip install ${PIP_OPTIONS} -r requirements.txt
    # Install PySide2 if needed
    # Pin-pointing for now to avoid issues with versions [5.15.0]
    - if [ "$QT_BINDING" == "PySide2" ];
      then
          pip install ${PIP_OPTIONS} pyside2;
      fi

    # Install built package
    # For wheel: Make sure silx does not come from cache or pypi
    # At this point all install_requires dependencies MUST be installed
    # as this is installing only from dist
    - if [ "$BUILD_COMMAND" == "sdist" ];
      then
          pip install --pre --find-links dist/ silx $PIP_INSTALL_EXTRA_ARGS;
      else
          pip install --pre --find-links dist/ --no-cache-dir --no-index silx $PIP_INSTALL_EXTRA_ARGS;
      fi

    # Print Python info
    - python ci/info_platform.py
    - pip list
    - if [ "$TRAVIS_OS_NAME" == "linux" ];
      then
          ldd $(python -c "import h5py;print(h5py.h5d.__file__)");
      fi

    - if [ "$TRAVIS_OS_NAME" == "osx" ];
      then
          pip install ${PIP_OPTIONS} --upgrade pynput;
          python ci/close_popup.py;
      fi

script:
    - if [ "$TRAVIS_OS_NAME" == "osx" ];
      then
          export SILX_TEST_LOW_MEM=True;
      fi
    - echo "QT_BINDING="$QT_BINDING
    - if [ -n "$QT_BINDING" ];
      then
          python run_tests.py --installed -v --qt-binding=$QT_BINDING;
      else
          python run_tests.py --installed -v --no-gui;
      fi

after_failure:
    # Display result as base64, while it is not possible to expose files
    - "for f in ./build/test-debug/*.png; do echo $f as base64; echo $( base64 $f) | fold -w 400; done"
